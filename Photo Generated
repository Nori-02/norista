<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تطبيق توليد الصور بالذكاء الاصطناعي</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Cairo:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Cairo', 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3b82f6; /* Blue-500 */
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .gallery-img-wrapper {
            position: relative;
        }
        .simulation-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(239, 68, 68, 0.8); /* Red-500 with opacity */
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: bold;
            backdrop-filter: blur(4px);
        }
    </style>
</head>
<body class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-4">

    <div class="container mx-auto p-6 bg-white rounded-xl shadow-2xl max-w-2xl w-full">
        <header class="mb-8 text-center">
            <h1 class="text-4xl font-bold text-gray-800">مولّد الصور بالذكاء الاصطناعي</h1>
            <p class="text-gray-600 mt-2">أدخل وصفًا نصيًا لإنشاء صورة فريدة. في حال فشل الاتصال، سيتم عرض صورة محاكاة.</p>
        </header>

        <main>
            <div class="mb-6">
                <label for="prompt" class="block mb-2 text-lg font-semibold text-gray-700">الوصف (Prompt):</label>
                <textarea id="prompt" rows="3" class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-150 ease-in-out" placeholder="مثال: رائد فضاء يركب حصانًا على سطح المريخ"></textarea>
            </div>

            <button id="generateButton" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                توليد الصورة
            </button>

            <div id="loadingIndicator" class="loader mt-8 hidden"></div>
            <div id="errorMessage" class="mt-6 p-4 bg-red-100 text-red-800 border-l-4 border-red-500 rounded-r-lg hidden"></div>
            <div id="infoMessage" class="mt-6 p-4 bg-blue-100 text-blue-800 border-l-4 border-blue-500 rounded-r-lg hidden"></div>

            <div id="imageContainer" class="mt-8 p-2 border border-dashed border-gray-300 rounded-lg bg-gray-50 min-h-[250px] flex items-center justify-center hidden">
                <div id="imageWrapper" class="gallery-img-wrapper">
                     <img id="generatedImage" src="#" alt="الصورة المولدة" class="max-w-full max-h-[500px] rounded-lg shadow-lg hidden">
                </div>
                <p id="placeholderText" class="text-gray-400 text-lg">سيتم عرض الصورة هنا بعد إنشائها.</p>
            </div>
        </main>

        <footer class="mt-10 text-center text-sm text-gray-500">
            <p>مدعوم بالذكاء الاصطناعي | تصميم لـ Gemini</p>
        </footer>
    </div>

    <script>
        const promptInput = document.getElementById('prompt');
        const generateButton = document.getElementById('generateButton');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const errorMessage = document.getElementById('errorMessage');
        const infoMessage = document.getElementById('infoMessage');
        const imageContainer = document.getElementById('imageContainer');
        const generatedImage = document.getElementById('generatedImage');
        const placeholderText = document.getElementById('placeholderText');
        const imageWrapper = document.getElementById('imageWrapper');

        generateButton.addEventListener('click', async () => {
            const promptText = promptInput.value.trim();

            if (!promptText) {
                displayError('الرجاء إدخال وصف لتوليد الصورة.');
                return;
            }

            // إعادة ضبط الواجهة
            loadingIndicator.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            infoMessage.classList.add('hidden');
            imageContainer.classList.add('hidden');
            generatedImage.classList.add('hidden');
            placeholderText.classList.remove('hidden');
            // إزالة شارة المحاكاة السابقة إن وجدت
            const existingBadge = imageWrapper.querySelector('.simulation-badge');
            if(existingBadge) {
                existingBadge.remove();
            }

            try {
                const apiKey = ""; // يترك فارغًا ليتم توفيره بواسطة البيئة
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                const payload = {
                    instances: [{ "prompt": promptText }],
                    parameters: { "sampleCount": 1 }
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    // إذا حدث خطأ، نرمي استثناء لمعالجته في قسم catch
                    throw new Error(`Status: ${response.status}`);
                }
                
                const result = await response.json();

                if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                    const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    displayImage(imageUrl, false); // false = ليست محاكاة
                } else {
                    throw new Error('لم يتم العثور على بيانات الصورة في استجابة API.');
                }

            } catch (error) {
                console.error('Error generating image:', error);
                // معالجة الخطأ وعرض وضع المحاكاة
                handleGenerationError(error, promptText);
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        });

        function handleGenerationError(error, promptText) {
            let errorMsg;
            // التحقق إذا كان الخطأ بسبب مشكلة في صلاحيات الوصول (401)
            if (error.message.includes("401")) {
                 errorMsg = "خطأ في الوصول إلى الخدمة (401). قد تكون هناك مشكلة في صلاحيات واجهة برمجة التطبيقات. سيتم الآن عرض صورة محاكاة.";
            } else {
                 errorMsg = `حدث خطأ أثناء توليد الصورة. سيتم عرض صورة محاكاة. (${error.message})`;
            }
            displayError(errorMsg);
            
            // عرض رسالة معلوماتية
            infoMessage.textContent = "يتم الآن إنشاء صورة محاكاة لتوضيح كيفية عمل التطبيق...";
            infoMessage.classList.remove('hidden');

            // محاكاة بعد فترة قصيرة
            setTimeout(() => {
                const simulatedImageUrl = `https://placehold.co/600x400/2c5282/ffffff?text=${encodeURIComponent(promptText)}`;
                displayImage(simulatedImageUrl, true); // true = محاكاة
                errorMessage.classList.add('hidden');
                infoMessage.classList.add('hidden');
            }, 3000);
        }

        function displayImage(url, isSimulation) {
            generatedImage.src = url;
            generatedImage.classList.remove('hidden');
            imageContainer.classList.remove('hidden');
            placeholderText.classList.add('hidden');

            if (isSimulation) {
                const badge = document.createElement('div');
                badge.className = 'simulation-badge';
                badge.textContent = 'صورة محاكاة';
                imageWrapper.prepend(badge);
            }
        }

        function displayError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }
        
        // إظهار حاوية الصورة عند التحميل الأولي
        imageContainer.classList.remove('hidden');
    </script>
</body>
</html>
